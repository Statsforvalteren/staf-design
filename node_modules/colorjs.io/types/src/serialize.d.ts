/** @typedef {import("./types.js").ColorTypes} ColorTypes */
/** @typedef {import("./types.js").SerializeOptions} SerializeOptions */
/** @typedef {import("./types.js").PlainColorObject} PlainColorObject */
/** @typedef {import("./types.js").ParseOptions} ParseOptions */
/**
 * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space
 * @param {ColorTypes} color
 * @param {SerializeOptions & Record<string, any>} options
 * @returns {string}
 */
export default function serialize(color: ColorTypes, options?: SerializeOptions & Record<string, any>): string;
export type ColorTypes = import("./types.js").ColorTypes;
export type SerializeOptions = import("./types.js").SerializeOptions;
export type PlainColorObject = import("./types.js").PlainColorObject;
export type ParseOptions = import("./types.js").ParseOptions;
//# sourceMappingURL=serialize.d.ts.map