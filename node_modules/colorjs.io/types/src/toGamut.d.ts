/**
 * Force coordinates to be in gamut of a certain color space.
 * Mutates the color it is passed.
 * @overload
 * @param {ColorTypes} color
 * @param {ToGamutOptions} [options]
 * @returns {PlainColorObject}
 */
declare function toGamut(color: ColorTypes, options?: ToGamutOptions): PlainColorObject;
/**
 * @overload
 * @param {ColorTypes} color
 * @param {string} [space]
 * @returns {PlainColorObject}
 */
declare function toGamut(color: ColorTypes, space?: string): PlainColorObject;
declare namespace toGamut {
    let returns: "color";
}
export default toGamut;
/**
 * Given a color `origin`, returns a new color that is in gamut using
 * the CSS Gamut Mapping Algorithm. If `space` is specified, it will be in gamut
 * in `space`, and returned in `space`. Otherwise, it will be in gamut and
 * returned in the color space of `origin`.
 * @param {ColorTypes} origin
 * @param {{ space?: string | ColorSpace | undefined }} param1
 * @returns {PlainColorObject}
 */
export function toGamutCSS(origin: ColorTypes, { space }?: {
    space?: string | ColorSpace | undefined;
}): PlainColorObject;
export type ColorTypes = import("./types.js").ColorTypes;
export type PlainColorObject = import("./types.js").PlainColorObject;
export type ToGamutOptions = import("./types.js").ToGamutOptions;
import ColorSpace from "./ColorSpace.js";
//# sourceMappingURL=toGamut.d.ts.map