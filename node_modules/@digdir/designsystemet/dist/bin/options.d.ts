import type { Command, OptionValueSource, OptionValues } from '@commander-js/extra-typings';
declare const getOptionIfMatchingSource: (...sources: OptionValueSource[]) => <Args extends unknown[], Opts extends OptionValues, K extends keyof Opts>(command: Command<Args, Opts>, option: K) => Opts[K] | undefined;
export type OptionGetter = ReturnType<typeof getOptionIfMatchingSource>;
/**
 * Get an option value if it is explicitly supplied to the CLI command.
 * The difference between this and using the option directly is that we return undefined
 * instead of the default value if the option was not explicitly set.
 */
export declare const getSuppliedCliOption: <Args extends unknown[], Opts extends OptionValues, K extends keyof Opts>(command: Command<Args, Opts>, option: K) => Opts[K] | undefined;
/**
 * Get the default value specified for a CLI command option.
 * Mostly useful for getting values which may later be overridden.
 */
export declare const getDefaultCliOption: <Args extends unknown[], Opts extends OptionValues, K extends keyof Opts>(command: Command<Args, Opts>, option: K) => Opts[K] | undefined;
/**
 * Try to get the explicitly supplied CLI option, and fall back to the default value
 * for the option as defined in the {@link Command}
 */
export declare const getCliOption: <Args extends unknown[], Opts extends OptionValues, K extends keyof Opts>(command: Command<Args, Opts>, option: K) => Opts[K] | undefined;
export {};
//# sourceMappingURL=options.d.ts.map