// src/scripts/createJsonSchema.ts
import { writeFile } from "fs/promises";
import { resolve } from "path";
import { z as z2 } from "zod";

// src/config.ts
import pc from "picocolors";
import * as R7 from "ramda";
import { z } from "zod";
import { fromError } from "zod-validation-error";

// src/colors/colorMetadata.ts
import * as R from "ramda";
var baseColors = {
  info: "#0A71C0",
  success: "#068718",
  warning: "#EA9B1B",
  danger: "#C01B1B"
};
var colorMetadata = {
  "background-default": {
    number: 1,
    name: "background-default",
    group: "background",
    displayName: "Background Default",
    description: {
      long: "Background Default er den mest n\xF8ytrale bakgrunnsfargen.",
      short: "Standard bakgrunnsfarge."
    },
    luminance: {
      light: 1,
      dark: 9e-3,
      contrast: 1e-3
    }
  },
  "background-tinted": {
    number: 2,
    name: "background-tinted",
    group: "background",
    displayName: "Background Tinted",
    description: {
      long: "Background Tinted er en bakgrunnsfarge som har et hint av farge i seg.",
      short: "Bakgrunn med et hint av farge i seg."
    },
    luminance: {
      light: 0.9,
      dark: 0.014,
      contrast: 65e-4
    }
  },
  "surface-default": {
    number: 3,
    name: "surface-default",
    group: "surface",
    displayName: "Surface Default",
    description: {
      long: "Surface Default brukes p\xE5 flater som ligger opp\xE5 bakgrunnsfargene. Dette er den mest n\xF8ytrale surface fargen.",
      short: "Standardfarge for overflater / komponenter."
    },
    luminance: {
      light: 1,
      dark: 0.021,
      contrast: 0.015
    }
  },
  "surface-tinted": {
    number: 4,
    name: "surface-tinted",
    group: "surface",
    displayName: "Surface Tinted",
    description: {
      long: "Surface Tinted brukes p\xE5 flater som ligger opp\xE5 bakgrunnsfargene. Denne har et hint av farge i seg.",
      short: "Overflater / komponenter med et hint av farge i seg."
    },
    luminance: {
      light: 0.81,
      dark: 0.027,
      contrast: 0.015
    }
  },
  "surface-hover": {
    number: 5,
    name: "surface-hover",
    group: "surface",
    displayName: "Surface Hover",
    description: {
      long: "Surface Hover brukes p\xE5 interaktive flater som ligger opp\xE5 bakgrunnsfargene i en hover state.",
      short: "Hover-farge til overflater / komponenter."
    },
    luminance: {
      light: 0.7,
      dark: 0.036,
      contrast: 0.028
    }
  },
  "surface-active": {
    number: 6,
    name: "surface-active",
    group: "surface",
    displayName: "Surface Active",
    description: {
      long: "Surface Active brukes p\xE5 interaktive flater som ligger opp\xE5 bakgrunnsfargene i en active state.",
      short: "Active-farge til overflater / komponenter."
    },
    luminance: {
      light: 0.59,
      dark: 0.056,
      contrast: 0.045
    }
  },
  "border-subtle": {
    number: 7,
    name: "border-subtle",
    group: "border",
    displayName: "Border Subtle",
    description: {
      long: "Border Subtle er den lyseste border-fargen og brukes for \xE5 skille elementer fra hverandre.",
      short: "Border-farge med lav kontrast til dekorativ bruk (skillelinjer)."
    },
    luminance: {
      light: 0.5,
      dark: 0.08,
      contrast: 0.26
    }
  },
  "border-default": {
    number: 8,
    name: "border-default",
    group: "border",
    displayName: "Border Default",
    description: {
      long: "Border Default er en border-farge som brukes n\xE5r man \xF8nsker god kontrast mot bakgrunnsfargene.",
      short: "Standard border-farge til skjemakomponenter og meningsb\xE6rende elementer."
    },
    luminance: {
      light: 0.19,
      dark: 0.22,
      contrast: 0.4
    }
  },
  "border-strong": {
    number: 9,
    name: "border-strong",
    group: "border",
    displayName: "Border Strong",
    description: {
      long: "Border Strong er den m\xF8rkeste border-fargen og brukes n\xE5r man \xF8nsker en veldig tydelig og sterk border.",
      short: "Border-farge med h\xF8y kontrast for ekstra synlighet."
    },
    luminance: {
      light: 0.11,
      dark: 0.39,
      contrast: 0.6
    }
  },
  "text-subtle": {
    number: 10,
    name: "text-subtle",
    group: "text",
    displayName: "Text Subtle",
    description: {
      long: "Text Subtle er den lyseste tekstfargen og brukes p\xE5 tekst som skal v\xE6re litt mindre synlig eller for \xE5 skape variasjon i typografien.",
      short: "Tekst- og ikonfarge med lavere kontrast."
    },
    luminance: {
      light: 0.11,
      dark: 0.39,
      contrast: 0.57
    }
  },
  "text-default": {
    number: 11,
    name: "text-default",
    group: "text",
    displayName: "Text Default",
    description: {
      long: "Text Default er den m\xF8rkeste tekstfargen og brukes p\xE5 tekst som skal v\xE6re mest synlig. Denne fargen b\xF8r brukes p\xE5 mesteparten av teksten p\xE5 en side.",
      short: "Tekst- og ikonfarge med h\xF8y kontrast og god synlighet."
    },
    luminance: {
      light: 0.0245,
      dark: 0.84,
      contrast: 0.86
    }
  },
  "base-default": {
    number: 12,
    name: "base-default",
    group: "base",
    displayName: "Base Default",
    description: {
      long: "Base Default fargen f\xE5r den samme hex koden som fargen som er valgt i verkt\xF8yet. Brukes ofte som farge p\xE5 viktige elementer og p\xE5 flater som skal fange brukerens oppmerksomhet.",
      short: "Standardfarge for solide bakgrunner."
    },
    luminance: {
      light: 1,
      dark: 1,
      contrast: 1
    }
  },
  "base-hover": {
    number: 13,
    name: "base-hover",
    group: "base",
    displayName: "Base Hover",
    description: {
      long: "Base Hover brukes som hover farge p\xE5 elementer som bruker Base Default fargen.",
      short: "Hover-farge for solide bakgrunner."
    },
    luminance: {
      light: 1,
      dark: 1,
      contrast: 1
    }
  },
  "base-active": {
    number: 14,
    name: "base-active",
    group: "base",
    displayName: "Base Active",
    description: {
      long: "Base Active brukes som active farge p\xE5 elementer som bruker Base Default fargen.",
      short: "Active-farge for solide bakgrunner."
    },
    luminance: {
      light: 1,
      dark: 1,
      contrast: 1
    }
  },
  "base-contrast-subtle": {
    number: 15,
    name: "base-contrast-subtle",
    group: "base",
    displayName: "Contrast Subtle",
    description: {
      long: "Contrast Subtle brukes som en viktig meningsb\xE6rende farge opp\xE5 Base Default fargen.",
      short: "Farge med god kontrast mot Base-default."
    },
    luminance: {
      light: 1,
      dark: 1,
      contrast: 1
    }
  },
  "base-contrast-default": {
    number: 16,
    name: "base-contrast-default",
    group: "base",
    displayName: "Contrast Default",
    description: {
      long: "Contrast Default brukes som en viktig meningsb\xE6rende farge opp\xE5 alle Base fargane.",
      short: "Farge med god kontrast mot Base-default og Base-hover."
    },
    luminance: {
      light: 1,
      dark: 1,
      contrast: 1
    }
  }
};
var colorMetadataByNumber = R.indexBy((metadata) => metadata.number, Object.values(colorMetadata));
var colorNames = Object.keys(colorMetadata);
var baseColorNames = Object.keys(baseColors);

// src/colors/theme.ts
import chroma2 from "chroma-js";
import * as R2 from "ramda";

// src/colors/utils.ts
import chroma from "chroma-js";
import Colorjs from "colorjs.io";
import { Hsluv } from "hsluv";
var convertToHex = (color) => {
  if (!color) {
    return "#000000";
  }
  if (/^#[0-9A-Fa-f]{6}$/.test(color)) {
    return color;
  }
  return chroma(color).hex();
};

// src/colors/theme.ts
var RESERVED_COLORS = ["neutral", "success", "warning", "danger", "info"];

// src/tokens/create/defaults.ts
import * as R3 from "ramda";

// src/tokens/create/generators/color.ts
import * as R4 from "ramda";

// src/tokens/create/generators/semantic.ts
import * as R5 from "ramda";

// src/tokens/create/generators/theme.ts
import * as R6 from "ramda";

// src/config.ts
var hexPatterns = [
  // Hex colors: #000, #0000, #000000, #00000000
  `#[0-9a-fA-F]{3}`,
  `#[0-9a-fA-F]{4}`,
  `#[0-9a-fA-F]{6}`,
  `#[0-9a-fA-F]{8}`
];
var reservedColorsPattern = `^(?!(?:${RESERVED_COLORS.join("|")})$)`;
var colorRegex = new RegExp(`^${hexPatterns.join("|")}$`);
var colorSchema = z.string().regex(colorRegex).transform(convertToHex).describe(
  `A hex color, which is used for creating a color scale. Invalid color names: ${RESERVED_COLORS.join(", ")}`
);
var colorCategorySchema = z.record(
  z.string().regex(new RegExp(reservedColorsPattern, "i"), {
    error: `Color names cannot include reserved names: ${RESERVED_COLORS.join(", ")}`
  }),
  colorSchema,
  {
    error: "Color definitions must be hex color values"
  }
).refine((colors) => !Object.keys(colors).some((key) => RESERVED_COLORS.includes(key.toLowerCase())), {
  error: `Color names cannot include reserved names: ${RESERVED_COLORS.join(", ")}`
}).describe("An object with one or more color definitions. The property name is used as the color name.");
var colorModeOverrideSchema = z.object({
  light: colorSchema.optional(),
  dark: colorSchema.optional()
}).describe('Override values for semantic color tokens like "background-subtle", "border-default", etc.');
var colorWeightOverrideSchema = z.partialRecord(z.enum([...colorNames]), colorModeOverrideSchema).describe('The name of the color to add overrides for, e.g. "accent"');
var semanticColorOverrideSchema = z.record(z.string(), colorWeightOverrideSchema).describe("An object with color names as keys");
var severityColorOverrideSchema = z.partialRecord(z.enum(baseColorNames), colorSchema.describe("A hex color, which is used for creating a color scale")).optional().describe("An object with severity color names as keys");
var overridesSchema = z.object({
  colors: semanticColorOverrideSchema.optional(),
  severity: severityColorOverrideSchema.optional()
}).describe("Overrides for generated design tokens. Currently only supports colors defined in your theme").optional();
var themeSchema = z.object({
  colors: z.object({
    main: colorCategorySchema,
    support: colorCategorySchema.optional().default({}),
    neutral: colorSchema
  }).meta({ description: "Defines the colors for this theme" }),
  typography: z.object({
    fontFamily: z.string().meta({ description: "Sets the font-family for this theme" })
  }).describe("Defines the typography for a given theme").optional(),
  borderRadius: z.number().meta({ description: "Defines the border-radius for this theme" }).optional(),
  overrides: overridesSchema
}).meta({ description: "An object defining a theme. The property name holding the object becomes the theme name." });
var commonConfig = z.object({
  clean: z.boolean().meta({ description: "Delete the output directory before building or creating tokens" }).optional()
});
var _configFileCreateSchema = z.object({
  outDir: z.string().meta({ description: "Path to the output directory for the created design tokens" }),
  themes: z.record(z.string(), themeSchema).meta({
    description: "An object with one or more themes. Each property defines a theme, and the property name is used as the theme name."
  })
}).required();
var configFileCreateSchema = _configFileCreateSchema.extend(commonConfig.shape);

// src/scripts/createJsonSchema.ts
var schema = z2.object({
  $schema: z2.string().optional()
}).extend(configFileCreateSchema.shape);
writeFile(
  resolve(import.meta.dirname, "../../dist/config.schema.json"),
  JSON.stringify(
    z2.toJSONSchema(schema, {
      unrepresentable: "any"
    }),
    void 0,
    2
  ),
  {
    encoding: "utf-8"
  }
);
