import type { ThemeObject } from '@tokens-studio/types';
import type { ThemeDimension, ThemePermutation } from '../../types.js';
/**
 * Find the theme permutations that are relevant for the given theme dimensions.
 *
 * Technically, for the given dimensions all permutations are included, while for other
 * dimensions the first permutation is used.
 *
 * @param processed$themes Theme objects from $themes.json (Tokens Studio)
 * @param dimensions Which theme dimensions to return permutations for.
 *    'theme' (e.g. altinn/digdir/uutilsynet) is always implicitly included.
 * @returns the relevant theme permutations
 */
export declare const getMultidimensionalThemes: (processed$themes: ProcessedThemeObject[], dimensions: ThemeDimension[]) => PermutatedTheme[];
export type PermutatedTheme = {
    name: string;
    selectedTokenSets: string[];
    permutation: ThemePermutation;
};
declare const processed: unique symbol;
/**
 * A Tokens Studio {@link ThemeObject} which has been processed for easier use in code
 */
export type ProcessedThemeObject = ThemeObject & {
    [processed]: true;
};
/**
 * Normalise theme names and theme group names for easier use in code
 * @param theme A theme object from $themes.json
 * @returns Processed theme object
 */
export declare function processThemeObject(theme: ThemeObject | ProcessedThemeObject): ProcessedThemeObject;
export type GroupedThemes = Record<keyof ThemePermutation, ProcessedThemeObject[]>;
export declare const getCustomColors: (processed$themes: ProcessedThemeObject[], colorGroups: (string | RegExp)[]) => string[];
export {};
//# sourceMappingURL=getMultidimensionalThemes.d.ts.map