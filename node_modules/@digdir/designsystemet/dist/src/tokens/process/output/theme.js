// src/tokens/process/output/theme.ts
import pc from "picocolors";
import * as R2 from "ramda";

// package.json
var package_default = {
  name: "@digdir/designsystemet",
  version: "1.7.1",
  description: "CLI for Designsystemet",
  author: "Designsystemet team",
  engines: {
    node: ">=20 <25"
  },
  repository: {
    type: "git",
    url: "git+https://github.com/digdir/designsystemet.git"
  },
  homepage: "https://github.com/digdir/designsystemet/tree/main/packages/cli",
  license: "MIT",
  type: "module",
  main: "./dist/src/index.js",
  files: [
    "./dist/**",
    "./configs/**"
  ],
  bin: "dist/bin/designsystemet.js",
  exports: {
    ".": {
      import: "./dist/src/index.js"
    },
    "./color": {
      import: "./dist/src/colors/index.js"
    },
    "./tokens": {
      import: "./dist/src/tokens/index.js"
    },
    "./types": {
      import: "./dist/src/types.js"
    }
  },
  publishConfig: {
    access: "public"
  },
  scripts: {
    designsystemet: "tsx ./bin/designsystemet.ts",
    "designsystemet:inspect": "tsx --inspect-brk ./bin/designsystemet.ts",
    build: "tsup && pnpm build:types && pnpm build:json-schema",
    "build:types": "tsc --emitDeclarationOnly --declaration",
    "build:json-schema": "tsx ./src/scripts/createJsonSchema.ts",
    types: "tsc --noEmit",
    "test:tokens-create-options": 'pnpm run designsystemet tokens create -m dominant:"#007682" -n "#003333" -b 99 -o ./temp/options/design-tokens --theme options --clean',
    "test:tokens-create-config": "pnpm run designsystemet tokens create --config ./configs/test-tokens.config.json",
    "test:tokens-build": "pnpm run designsystemet tokens build -t ./temp/options/design-tokens -o ./temp/options/build --clean",
    "test:tokens-build-tailwind": "pnpm run designsystemet tokens build -t ./temp/options/design-tokens -o ./temp/options/build --clean --experimental-tailwind",
    "test:tokens-build-config": "pnpm run designsystemet tokens build -t ./temp/config/design-tokens -o ./temp/config/build --clean",
    "test:tokens-build-config:inspect": "pnpm run designsystemet:inspect tokens build -t ./temp/config/design-tokens -o ./temp/config/build --clean",
    "test:tokens-build-config-tailwind": "pnpm run designsystemet tokens build -t ./temp/config/design-tokens -o ./temp/config/build --clean --experimental-tailwind",
    "test:tokens-create-and-build-options": "pnpm test:tokens-create-options && pnpm test:tokens-build",
    "test:tokens-create-and-build-config": "pnpm test:tokens-create-config && pnpm test:tokens-build-config",
    test: "node -v && pnpm test:tokens-create-and-build-options && pnpm test:tokens-create-and-build-config",
    "digdir:tokens-build": "pnpm run designsystemet tokens build -t ../../internal/design-tokens -o ../../packages/theme/brand --clean --experimental-tailwind",
    "digdir:tokens-create": "pnpm run designsystemet tokens create --config ./configs/digdir.config.json",
    "update:template": "tsx ./src/scripts/update-template.ts",
    "update:preview-tokens": "tsx ./src/scripts/update-preview-tokens.ts",
    "update:theme-digdir": "pnpm digdir:tokens-create && tsx ./src/scripts/update-design-tokens.ts && pnpm digdir:tokens-build",
    verify: "pnpm test && pnpm update:template && pnpm update:theme-digdir && pnpm build:tokens"
  },
  dependencies: {
    "@commander-js/extra-typings": "^14.0.0",
    "@tokens-studio/sd-transforms": "1.3.0",
    "apca-w3": "^0.1.9",
    "change-case": "^5.4.4",
    "chroma-js": "^3.1.2",
    "colorjs.io": "^0.6.0-alpha.1",
    commander: "^14.0.1",
    "fast-glob": "^3.3.3",
    hsluv: "^1.0.1",
    "object-hash": "^3.0.0",
    picocolors: "^1.1.1",
    postcss: "^8.5.6",
    ramda: "^0.32.0",
    "style-dictionary": "^5.1.1",
    zod: "^4.1.12",
    "zod-validation-error": "^4.0.2"
  },
  devDependencies: {
    "@tokens-studio/types": "0.5.2",
    "@types/apca-w3": "^0.1.3",
    "@types/chroma-js": "^3.1.1",
    "@types/fs-extra": "^11.0.4",
    "@types/node": "^22.18.11",
    "@types/object-hash": "^3.0.6",
    "@types/ramda": "^0.31.1",
    "fs-extra": "^11.3.2",
    tslib: "^2.8.1",
    tsup: "^8.5.0",
    tsx: "^4.20.6",
    typescript: "^5.9.3"
  }
};

// src/tokens/utils.ts
import * as R from "ramda";
var mapToLowerCase = R.map(R.toLower);
var hasAnyTruth = R.any(R.equals(true));
var getType = (token) => (token.$type ?? token.type) || "";
var typeEquals = R.curry(
  (types, token) => {
    if (R.isNil(token)) {
      return false;
    }
    return R.includes(R.toLower(getType(token)), R.map(R.toLower, Array.isArray(types) ? types : [types]));
  }
);
var pathStartsWithOneOf = R.curry(
  (paths, token) => {
    if (R.isNil(token)) {
      return false;
    }
    const tokenPath = mapToLowerCase(token.path);
    const matchPathsStartingWith = R.map((pathOrString) => {
      const path = typeof pathOrString === "string" ? [pathOrString] : pathOrString;
      return R.startsWith(mapToLowerCase(path), tokenPath);
    }, paths);
    return hasAnyTruth(matchPathsStartingWith);
  }
);
var sizeMap = {
  xsmall: "xs",
  small: "sm",
  medium: "md",
  large: "lg",
  xlarge: "xl"
};
var sizeComparator = (size) => {
  const sortIndex = Object.entries(sizeMap).findIndex(([key, val]) => key === size || val === size);
  return sortIndex ?? 0;
};

// src/tokens/process/output/theme.ts
var defaultFileHeader = `build: v${package_default.version}`;
var getFileNameWithoutExtension = (path) => {
  const pathSegments = path.split("/");
  return pathSegments[pathSegments.length - 1].split(".").slice(0, -1).join(".");
};
var createThemeCSSFiles = ({
  processedBuilds,
  fileHeader = defaultFileHeader
}) => {
  const groupedByTheme = {};
  for (const [_, buildResults] of Object.entries(processedBuilds)) {
    for (const buildResult of buildResults) {
      const themeName = buildResult.permutation.theme;
      const newOutputs = buildResult.formatted;
      if (R2.isNotEmpty(newOutputs)) {
        const currentOutputs = groupedByTheme[themeName] ?? [];
        groupedByTheme[themeName] = R2.concat(currentOutputs, newOutputs);
      }
    }
  }
  const sortOrder = [
    "size-mode/",
    "type-scale",
    "color-scheme/light",
    "typography/secondary",
    "size",
    "semantic",
    "color-scheme/dark",
    "color-scheme/contrast",
    "typography/primary",
    "color/"
  ];
  const sortByDefinedOrder = R2.sortBy((file) => {
    const filePath = file.destination || "";
    const sortIndex = sortOrder.findIndex((sortElement) => {
      if (sortElement.endsWith("/")) {
        return filePath.includes(sortElement);
      }
      return filePath.includes(`${sortElement}.css`);
    });
    if (sortIndex === -1) {
      console.error(
        pc.yellow(`WARNING: CSS section does not have a defined sort order: ${filePath.replace(".css", "")}`)
      );
      console.log(
        pc.dim(
          `
The section will currently be added to the end of the entry file, but the exact
order may change due to nondeterminism.`.trim()
        )
      );
      return Infinity;
    }
    return sortIndex;
  });
  const header = `@charset "UTF-8";
/*
${fileHeader}
*/

`;
  const sortAlphabetically = R2.sort(R2.ascend((x) => x.destination || ""));
  const sortBySize = R2.sortBy(
    R2.pipe((s) => getFileNameWithoutExtension(s.destination ?? ""), sizeComparator)
  );
  const pickOutputs = R2.map(R2.view(R2.lensProp("output")));
  const themeCSSFile = R2.pipe(
    sortAlphabetically,
    sortBySize,
    sortByDefinedOrder,
    pickOutputs,
    R2.join("\n"),
    (content) => header + content
  );
  const themeCSSFiles = Object.entries(groupedByTheme).map(([theme, files]) => ({
    destination: `${theme}.css`,
    output: themeCSSFile(files)
  }));
  return themeCSSFiles;
};
export {
  createThemeCSSFiles,
  defaultFileHeader
};
