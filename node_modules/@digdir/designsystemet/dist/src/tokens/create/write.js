// src/tokens/create/write.ts
import path from "path";
import pc2 from "picocolors";
import * as R from "ramda";

// src/utils.ts
import fs from "fs/promises";
import pc from "picocolors";
var mkdir = async (dir, dry) => {
  if (dry) {
    console.log(`${pc.blue("mkdir")} ${dir}`);
    return Promise.resolve();
  }
  const exists = await fs.access(dir, fs.constants.F_OK).then(() => true).catch(() => false);
  if (exists) {
    return Promise.resolve();
  }
  return fs.mkdir(dir, { recursive: true });
};
var writeFile = async (path2, data, dry) => {
  if (dry) {
    console.log(`${pc.blue("writeFile")} ${path2}`);
    return Promise.resolve();
  }
  return fs.writeFile(path2, data, { encoding: "utf-8" }).catch((error) => {
    console.error(pc.red(`Error writing file: ${path2}`));
    console.error(pc.red(error));
    throw error;
  });
};
var readFile = async (path2, dry, allowFileNotFound) => {
  if (dry) {
    console.log(`${pc.blue("readFile")} ${path2}`);
    return Promise.resolve("");
  }
  try {
    return await fs.readFile(path2, "utf-8");
  } catch (error) {
    if (allowFileNotFound && error.code === "ENOENT") {
      return "";
    }
    throw error;
  }
};

// package.json
var package_default = {
  name: "@digdir/designsystemet",
  version: "1.7.1",
  description: "CLI for Designsystemet",
  author: "Designsystemet team",
  engines: {
    node: ">=20 <25"
  },
  repository: {
    type: "git",
    url: "git+https://github.com/digdir/designsystemet.git"
  },
  homepage: "https://github.com/digdir/designsystemet/tree/main/packages/cli",
  license: "MIT",
  type: "module",
  main: "./dist/src/index.js",
  files: [
    "./dist/**",
    "./configs/**"
  ],
  bin: "dist/bin/designsystemet.js",
  exports: {
    ".": {
      import: "./dist/src/index.js"
    },
    "./color": {
      import: "./dist/src/colors/index.js"
    },
    "./tokens": {
      import: "./dist/src/tokens/index.js"
    },
    "./types": {
      import: "./dist/src/types.js"
    }
  },
  publishConfig: {
    access: "public"
  },
  scripts: {
    designsystemet: "tsx ./bin/designsystemet.ts",
    "designsystemet:inspect": "tsx --inspect-brk ./bin/designsystemet.ts",
    build: "tsup && pnpm build:types && pnpm build:json-schema",
    "build:types": "tsc --emitDeclarationOnly --declaration",
    "build:json-schema": "tsx ./src/scripts/createJsonSchema.ts",
    types: "tsc --noEmit",
    "test:tokens-create-options": 'pnpm run designsystemet tokens create -m dominant:"#007682" -n "#003333" -b 99 -o ./temp/options/design-tokens --theme options --clean',
    "test:tokens-create-config": "pnpm run designsystemet tokens create --config ./configs/test-tokens.config.json",
    "test:tokens-build": "pnpm run designsystemet tokens build -t ./temp/options/design-tokens -o ./temp/options/build --clean",
    "test:tokens-build-tailwind": "pnpm run designsystemet tokens build -t ./temp/options/design-tokens -o ./temp/options/build --clean --experimental-tailwind",
    "test:tokens-build-config": "pnpm run designsystemet tokens build -t ./temp/config/design-tokens -o ./temp/config/build --clean",
    "test:tokens-build-config:inspect": "pnpm run designsystemet:inspect tokens build -t ./temp/config/design-tokens -o ./temp/config/build --clean",
    "test:tokens-build-config-tailwind": "pnpm run designsystemet tokens build -t ./temp/config/design-tokens -o ./temp/config/build --clean --experimental-tailwind",
    "test:tokens-create-and-build-options": "pnpm test:tokens-create-options && pnpm test:tokens-build",
    "test:tokens-create-and-build-config": "pnpm test:tokens-create-config && pnpm test:tokens-build-config",
    test: "node -v && pnpm test:tokens-create-and-build-options && pnpm test:tokens-create-and-build-config",
    "digdir:tokens-build": "pnpm run designsystemet tokens build -t ../../internal/design-tokens -o ../../packages/theme/brand --clean --experimental-tailwind",
    "digdir:tokens-create": "pnpm run designsystemet tokens create --config ./configs/digdir.config.json",
    "update:template": "tsx ./src/scripts/update-template.ts",
    "update:preview-tokens": "tsx ./src/scripts/update-preview-tokens.ts",
    "update:theme-digdir": "pnpm digdir:tokens-create && tsx ./src/scripts/update-design-tokens.ts && pnpm digdir:tokens-build",
    verify: "pnpm test && pnpm update:template && pnpm update:theme-digdir && pnpm build:tokens"
  },
  dependencies: {
    "@commander-js/extra-typings": "^14.0.0",
    "@tokens-studio/sd-transforms": "1.3.0",
    "apca-w3": "^0.1.9",
    "change-case": "^5.4.4",
    "chroma-js": "^3.1.2",
    "colorjs.io": "^0.6.0-alpha.1",
    commander: "^14.0.1",
    "fast-glob": "^3.3.3",
    hsluv: "^1.0.1",
    "object-hash": "^3.0.0",
    picocolors: "^1.1.1",
    postcss: "^8.5.6",
    ramda: "^0.32.0",
    "style-dictionary": "^5.1.1",
    zod: "^4.1.12",
    "zod-validation-error": "^4.0.2"
  },
  devDependencies: {
    "@tokens-studio/types": "0.5.2",
    "@types/apca-w3": "^0.1.3",
    "@types/chroma-js": "^3.1.1",
    "@types/fs-extra": "^11.0.4",
    "@types/node": "^22.18.11",
    "@types/object-hash": "^3.0.6",
    "@types/ramda": "^0.31.1",
    "fs-extra": "^11.3.2",
    tslib: "^2.8.1",
    tsup: "^8.5.0",
    tsx: "^4.20.6",
    typescript: "^5.9.3"
  }
};

// src/tokens/create/generators/$designsystemet.ts
function generate$Designsystemet() {
  return {
    name: package_default.name,
    version: package_default.version
  };
}

// src/tokens/create/generators/$metadata.ts
function generate$Metadata(schemes, themes, colors) {
  return {
    tokenSetOrder: [
      "primitives/globals",
      "primitives/modes/size/small",
      "primitives/modes/size/medium",
      "primitives/modes/size/large",
      "primitives/modes/size/global",
      "primitives/modes/typography/size/small",
      "primitives/modes/typography/size/medium",
      "primitives/modes/typography/size/large",
      ...themes.map((theme) => `primitives/modes/typography/primary/${theme}`),
      ...themes.map((theme) => `primitives/modes/typography/secondary/${theme}`),
      ...schemes.flatMap((scheme) => [...themes.map((theme) => `primitives/modes/color-scheme/${scheme}/${theme}`)]),
      ...themes.map((theme) => `themes/${theme}`),
      "semantic/color",
      ...Object.entries(colors.main).map(([color]) => `semantic/modes/main-color/${color}`),
      ...Object.entries(colors.support).map(([color]) => `semantic/modes/support-color/${color}`),
      "semantic/style"
    ]
  };
}

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/BoxShadowTypes.js
var BoxShadowTypes;
(function(BoxShadowTypes2) {
  BoxShadowTypes2["DROP_SHADOW"] = "dropShadow";
  BoxShadowTypes2["INNER_SHADOW"] = "innerShadow";
})(BoxShadowTypes || (BoxShadowTypes = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/ColorModifierTypes.js
var ColorModifierTypes;
(function(ColorModifierTypes2) {
  ColorModifierTypes2["LIGHTEN"] = "lighten";
  ColorModifierTypes2["DARKEN"] = "darken";
  ColorModifierTypes2["MIX"] = "mix";
  ColorModifierTypes2["ALPHA"] = "alpha";
})(ColorModifierTypes || (ColorModifierTypes = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/ColorSpaceTypes.js
var ColorSpaceTypes;
(function(ColorSpaceTypes2) {
  ColorSpaceTypes2["LCH"] = "lch";
  ColorSpaceTypes2["SRGB"] = "srgb";
  ColorSpaceTypes2["P3"] = "p3";
  ColorSpaceTypes2["HSL"] = "hsl";
})(ColorSpaceTypes || (ColorSpaceTypes = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/Properties.js
var Properties;
(function(Properties2) {
  Properties2["sizing"] = "sizing";
  Properties2["height"] = "height";
  Properties2["width"] = "width";
  Properties2["spacing"] = "spacing";
  Properties2["verticalPadding"] = "verticalPadding";
  Properties2["horizontalPadding"] = "horizontalPadding";
  Properties2["paddingTop"] = "paddingTop";
  Properties2["paddingRight"] = "paddingRight";
  Properties2["paddingBottom"] = "paddingBottom";
  Properties2["paddingLeft"] = "paddingLeft";
  Properties2["itemSpacing"] = "itemSpacing";
  Properties2["fill"] = "fill";
  Properties2["backgroundBlur"] = "backgroundBlur";
  Properties2["border"] = "border";
  Properties2["borderTop"] = "borderTop";
  Properties2["borderRight"] = "borderRight";
  Properties2["borderBottom"] = "borderBottom";
  Properties2["borderLeft"] = "borderLeft";
  Properties2["borderColor"] = "borderColor";
  Properties2["borderRadius"] = "borderRadius";
  Properties2["borderRadiusTopLeft"] = "borderRadiusTopLeft";
  Properties2["borderRadiusTopRight"] = "borderRadiusTopRight";
  Properties2["borderRadiusBottomRight"] = "borderRadiusBottomRight";
  Properties2["borderRadiusBottomLeft"] = "borderRadiusBottomLeft";
  Properties2["borderWidth"] = "borderWidth";
  Properties2["borderWidthTop"] = "borderWidthTop";
  Properties2["borderWidthRight"] = "borderWidthRight";
  Properties2["borderWidthBottom"] = "borderWidthBottom";
  Properties2["borderWidthLeft"] = "borderWidthLeft";
  Properties2["boxShadow"] = "boxShadow";
  Properties2["opacity"] = "opacity";
  Properties2["fontFamilies"] = "fontFamilies";
  Properties2["fontWeights"] = "fontWeights";
  Properties2["fontSizes"] = "fontSizes";
  Properties2["lineHeights"] = "lineHeights";
  Properties2["typography"] = "typography";
  Properties2["composition"] = "composition";
  Properties2["letterSpacing"] = "letterSpacing";
  Properties2["paragraphSpacing"] = "paragraphSpacing";
  Properties2["textCase"] = "textCase";
  Properties2["dimension"] = "dimension";
  Properties2["textDecoration"] = "textDecoration";
  Properties2["asset"] = "asset";
  Properties2["tokenValue"] = "tokenValue";
  Properties2["value"] = "value";
  Properties2["tokenName"] = "tokenName";
  Properties2["description"] = "description";
})(Properties || (Properties = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/TokenSetStatus.js
var TokenSetStatus;
(function(TokenSetStatus2) {
  TokenSetStatus2["DISABLED"] = "disabled";
  TokenSetStatus2["SOURCE"] = "source";
  TokenSetStatus2["ENABLED"] = "enabled";
})(TokenSetStatus || (TokenSetStatus = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/TokenTypes.js
var TokenTypes;
(function(TokenTypes2) {
  TokenTypes2["OTHER"] = "other";
  TokenTypes2["COLOR"] = "color";
  TokenTypes2["BORDER_RADIUS"] = "borderRadius";
  TokenTypes2["SIZING"] = "sizing";
  TokenTypes2["SPACING"] = "spacing";
  TokenTypes2["TEXT"] = "text";
  TokenTypes2["TYPOGRAPHY"] = "typography";
  TokenTypes2["OPACITY"] = "opacity";
  TokenTypes2["BORDER_WIDTH"] = "borderWidth";
  TokenTypes2["STROKE_STYLE"] = "strokeStyle";
  TokenTypes2["BOX_SHADOW"] = "boxShadow";
  TokenTypes2["FONT_FAMILIES"] = "fontFamilies";
  TokenTypes2["FONT_WEIGHTS"] = "fontWeights";
  TokenTypes2["LINE_HEIGHTS"] = "lineHeights";
  TokenTypes2["FONT_SIZES"] = "fontSizes";
  TokenTypes2["LETTER_SPACING"] = "letterSpacing";
  TokenTypes2["PARAGRAPH_SPACING"] = "paragraphSpacing";
  TokenTypes2["PARAGRAPH_INDENT"] = "paragraphIndent";
  TokenTypes2["TEXT_DECORATION"] = "textDecoration";
  TokenTypes2["TEXT_CASE"] = "textCase";
  TokenTypes2["COMPOSITION"] = "composition";
  TokenTypes2["DIMENSION"] = "dimension";
  TokenTypes2["BORDER"] = "border";
  TokenTypes2["ASSET"] = "asset";
  TokenTypes2["BOOLEAN"] = "boolean";
  TokenTypes2["NUMBER"] = "number";
})(TokenTypes || (TokenTypes = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/BorderValues.js
var BorderValues;
(function(BorderValues2) {
  BorderValues2["BORDER_COLOR"] = "color";
  BorderValues2["BORDER_WIDTH"] = "width";
  BorderValues2["BORDER_STYLE"] = "style";
})(BorderValues || (BorderValues = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/StrokeStyleValues.js
var StrokeStyleValues;
(function(StrokeStyleValues2) {
  StrokeStyleValues2["SOLID"] = "solid";
  StrokeStyleValues2["DASHED"] = "dashed";
  StrokeStyleValues2["DOTTED"] = "dotted";
  StrokeStyleValues2["DOUBLE"] = "double";
  StrokeStyleValues2["GROOVE"] = "groove";
  StrokeStyleValues2["RIDGE"] = "ridge";
  StrokeStyleValues2["OUTSET"] = "outset";
  StrokeStyleValues2["INSET"] = "inset";
})(StrokeStyleValues || (StrokeStyleValues = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/BoxShadowValues.js
var BoxShadowValues;
(function(BoxShadowValues2) {
  BoxShadowValues2["TYPE"] = "type";
  BoxShadowValues2["COLOR"] = "color";
  BoxShadowValues2["X"] = "x";
  BoxShadowValues2["Y"] = "y";
  BoxShadowValues2["BLUR"] = "blur";
  BoxShadowValues2["SPREAD"] = "spread";
  BoxShadowValues2["BLEND_MODE"] = "blendMode";
})(BoxShadowValues || (BoxShadowValues = {}));

// ../../node_modules/.pnpm/@tokens-studio+types@0.5.2/node_modules/@tokens-studio/types/dist/constants/TypographyValues.js
var TypographyValues;
(function(TypographyValues2) {
  TypographyValues2["FONT_FAMILY"] = "fontFamily";
  TypographyValues2["FONT_WEIGHT"] = "fontWeight";
  TypographyValues2["LINE_HEIGHT"] = "lineHeight";
  TypographyValues2["FONT_SIZE"] = "fontSize";
  TypographyValues2["LETTER_SPACING"] = "letterSpacing";
  TypographyValues2["PARAGRAPH_SPACING"] = "paragraphSpacing";
  TypographyValues2["PARAGRAPH_INDENT"] = "paragraphIndent";
  TypographyValues2["TEXT_DECORATION"] = "textDecoration";
  TypographyValues2["TEXT_CASE"] = "textCase";
})(TypographyValues || (TypographyValues = {}));

// src/tokens/create/generators/$themes.ts
var capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);
async function createHash(text, algo = "SHA-1") {
  const crypto = globalThis.crypto;
  return Array.from(
    new Uint8Array(await crypto.subtle.digest(algo, new TextEncoder().encode(text))),
    (byte) => byte.toString(16).padStart(2, "0")
  ).join("");
}
async function generate$Themes(colorSchemes, themes, colors) {
  return [
    ...generateSizeGroup(),
    ...await generateThemesGroup(themes),
    ...generateTypographyGroup(themes),
    ...generateColorSchemesGroup(colorSchemes, themes),
    generateSemanticGroup(),
    ...await generateColorGroup("main", colors),
    ...await generateColorGroup("support", colors)
  ];
}
function generateSizeGroup() {
  return [
    {
      id: "8b2c8cc86611a34b135cb22948666779361fd729",
      name: "medium",
      $figmaStyleReferences: {},
      selectedTokenSets: {
        "primitives/modes/size/medium": TokenSetStatus.SOURCE,
        "primitives/modes/size/global": TokenSetStatus.ENABLED,
        "primitives/modes/typography/size/medium": TokenSetStatus.ENABLED
      },
      $figmaCollectionId: "VariableCollectionId:36248:20757",
      $figmaModeId: "41630:1",
      group: "Size"
    },
    {
      id: "d49b9eebeb48a4f165a74b7261733d0a73370f0e",
      name: "large",
      $figmaStyleReferences: {},
      selectedTokenSets: {
        "primitives/modes/size/large": TokenSetStatus.SOURCE,
        "primitives/modes/size/global": TokenSetStatus.ENABLED,
        "primitives/modes/typography/size/large": TokenSetStatus.ENABLED
      },
      $figmaCollectionId: "VariableCollectionId:36248:20757",
      $figmaModeId: "41630:2",
      group: "Size"
    },
    {
      id: "fb11567729c298ca37c9da4e3a27716a23480824",
      name: "small",
      $figmaStyleReferences: {},
      selectedTokenSets: {
        "primitives/modes/size/small": TokenSetStatus.SOURCE,
        "primitives/modes/size/global": TokenSetStatus.ENABLED,
        "primitives/modes/typography/size/small": TokenSetStatus.ENABLED
      },
      $figmaCollectionId: "VariableCollectionId:36248:20757",
      $figmaModeId: "41630:3",
      group: "Size"
    }
  ];
}
var colorSchemeDefaults = {
  light: {
    name: "Light",
    selectedTokenSets: {},
    id: "0daa3ca0b427b9349da7e7dc00101b5668972926",
    $figmaCollectionId: "VariableCollectionId:34811:5472",
    $figmaModeId: "34811:0"
  },
  dark: {
    name: "Dark",
    selectedTokenSets: {},
    id: "9ebd8aed52afbffc17e2666e8b4653a53498b257",
    $figmaCollectionId: "VariableCollectionId:34811:5472",
    $figmaModeId: "34811:1"
  },
  contrast: {
    name: "Contrast",
    selectedTokenSets: {},
    id: "9ebd8aed52afbffc17e2666e8b4653a53498b123",
    $figmaCollectionId: "VariableCollectionId:34811:5472",
    $figmaModeId: "34811:2"
  }
};
function generateColorSchemesGroup(colorSchemes, themes) {
  return colorSchemes.map(
    (scheme) => ({
      ...colorSchemeDefaults[scheme],
      selectedTokenSets: Object.fromEntries([
        ...themes.map((theme) => [`primitives/modes/color-scheme/${scheme}/${theme}`, TokenSetStatus.ENABLED])
      ]),
      group: "Color scheme"
    })
  );
}
async function generateThemesGroup(themes) {
  return Promise.all(
    themes.map(
      async (theme, index) => ({
        id: await createHash(theme),
        $figmaCollectionId: "VariableCollectionId:36528:61712",
        $figmaModeId: `40960:${index + 6}`,
        // Start on 6 in Token Studio and Community file for some reason
        name: theme,
        selectedTokenSets: {
          [`themes/${theme}`]: TokenSetStatus.ENABLED
        },
        group: "Theme"
      })
    )
  );
}
function generateSemanticGroup() {
  return {
    id: "541629445ef90ad5363f9e88f52a1ccb617e6f84",
    name: "Semantic",
    selectedTokenSets: {
      "semantic/style": TokenSetStatus.ENABLED,
      "semantic/color": TokenSetStatus.ENABLED,
      "primitives/globals": TokenSetStatus.SOURCE
    },
    $figmaCollectionId: "VariableCollectionId:34811:5976",
    $figmaModeId: "34811:5",
    group: "Semantic"
  };
}
async function generateColorGroup(group, colors) {
  return Promise.all(
    Object.entries(colors[group]).map(
      async ([color]) => ({
        id: await createHash(`${group}-${color}`),
        name: color,
        selectedTokenSets: {
          [`semantic/modes/${group}-color/${color}`]: TokenSetStatus.ENABLED
        },
        group: `${capitalize(group)} color`
      })
    )
  );
}
function generateTypographyGroup(themes) {
  return [
    {
      id: "368d753fcac4455f289500eaa42e70dc0a03522f",
      $figmaCollectionId: "VariableCollectionId:36248:20769",
      $figmaModeId: "36248:2",
      name: "Primary",
      selectedTokenSets: Object.fromEntries(
        themes.map((theme) => [`primitives/modes/typography/primary/${theme}`, TokenSetStatus.ENABLED])
      ),
      group: "Typography"
    },
    {
      id: "264b8bd1d40b364e1ea3acf09e49795ddd4c513c",
      $figmaCollectionId: "VariableCollectionId:36248:20769",
      $figmaModeId: "36248:3",
      name: "Secondary",
      selectedTokenSets: Object.fromEntries(
        themes.map((theme) => [`primitives/modes/typography/secondary/${theme}`, TokenSetStatus.ENABLED])
      ),
      group: "Typography"
    }
  ];
}

// src/tokens/create/write.ts
var stringify = (data) => JSON.stringify(data, null, 2);
var writeTokens = async (options) => {
  const {
    outDir,
    tokenSets,
    theme: { name: themeName, colors },
    dry
  } = options;
  const targetDir = path.resolve(process.cwd(), String(outDir));
  const $themesPath = path.join(targetDir, "$themes.json");
  const $metadataPath = path.join(targetDir, "$metadata.json");
  const $designsystemetPath = path.join(targetDir, "$designsystemet.jsonc");
  let themeObjects = [];
  await mkdir(targetDir, dry);
  try {
    const $themes2 = await readFile($themesPath);
    if ($themes2) {
      themeObjects = JSON.parse($themes2);
    }
  } catch (_error) {
  }
  const concatThemeNames = R.pipe(
    R.filter((obj) => R.toLower(obj.group || "") === "theme"),
    R.map(R.prop("name")),
    // New theme is added to the end of the list so we keep the same order from config and Token Studio
    R.append(themeName),
    R.uniq
  );
  const themes = concatThemeNames(themeObjects);
  console.log(`
Themes: ${pc2.blue(themes.join(", "))}`);
  const $themes = await generate$Themes(["dark", "light"], themes, colors);
  const $metadata = generate$Metadata(["dark", "light"], themes, colors);
  const $designsystemet = generate$Designsystemet();
  await writeFile($themesPath, stringify($themes), dry);
  await writeFile($metadataPath, stringify($metadata), dry);
  await writeFile($designsystemetPath, stringify($designsystemet), dry);
  for (const [set, tokens] of tokenSets) {
    const fileDir = path.join(targetDir, path.dirname(set));
    await mkdir(fileDir, dry);
    const filePath = path.join(targetDir, `${set}.json`);
    await writeFile(filePath, stringify(tokens), dry);
  }
  console.log(`Finished creating Designsystem design tokens in ${pc2.green(outDir)} for theme ${pc2.blue(themeName)}`);
};
export {
  stringify,
  writeTokens
};
