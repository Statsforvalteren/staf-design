import { z } from 'zod';
/**
 * Validates a configuration object against a provided Zod schema.
 *
 * @template T - The expected type of the validated configuration.
 * @param schema - A Zod schema used to validate the configuration object.
 * @param unvalidatedConfig - The configuration object to validate.
 * @returns The validated configuration object, typed as T.
 * @throws Exits the process with code 1 if validation fails, after logging a friendly error message.
 */
export declare function validateConfig<T>(schema: z.ZodType<T>, unvalidatedConfig: Record<string, unknown>, configPath: string): T;
export declare function parseConfig<T>(configFile: string, configPath: string): T;
export declare const colorRegex: RegExp;
declare const overridesSchema: z.ZodOptional<z.ZodObject<{
    colors: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodEnum<{
        "background-default": "background-default";
        "background-tinted": "background-tinted";
        "surface-default": "surface-default";
        "surface-tinted": "surface-tinted";
        "surface-hover": "surface-hover";
        "surface-active": "surface-active";
        "border-subtle": "border-subtle";
        "border-default": "border-default";
        "border-strong": "border-strong";
        "text-subtle": "text-subtle";
        "text-default": "text-default";
        "base-default": "base-default";
        "base-hover": "base-hover";
        "base-active": "base-active";
        "base-contrast-subtle": "base-contrast-subtle";
        "base-contrast-default": "base-contrast-default";
    }> & z.core.$partial, z.ZodObject<{
        light: z.ZodOptional<z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
        dark: z.ZodOptional<z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
    }, z.core.$strip>>>>;
    severity: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodEnum<{
        danger: "danger";
        info: "info";
        success: "success";
        warning: "warning";
    }> & z.core.$partial, z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>>>;
}, z.core.$strip>>;
declare const themeSchema: z.ZodObject<{
    colors: z.ZodObject<{
        main: z.ZodRecord<z.ZodString, z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
        support: z.ZodDefault<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>>>;
        neutral: z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>;
    }, z.core.$strip>;
    typography: z.ZodOptional<z.ZodObject<{
        fontFamily: z.ZodString;
    }, z.core.$strip>>;
    borderRadius: z.ZodOptional<z.ZodNumber>;
    overrides: z.ZodOptional<z.ZodObject<{
        colors: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodEnum<{
            "background-default": "background-default";
            "background-tinted": "background-tinted";
            "surface-default": "surface-default";
            "surface-tinted": "surface-tinted";
            "surface-hover": "surface-hover";
            "surface-active": "surface-active";
            "border-subtle": "border-subtle";
            "border-default": "border-default";
            "border-strong": "border-strong";
            "text-subtle": "text-subtle";
            "text-default": "text-default";
            "base-default": "base-default";
            "base-hover": "base-hover";
            "base-active": "base-active";
            "base-contrast-subtle": "base-contrast-subtle";
            "base-contrast-default": "base-contrast-default";
        }> & z.core.$partial, z.ZodObject<{
            light: z.ZodOptional<z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
            dark: z.ZodOptional<z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
        }, z.core.$strip>>>>;
        severity: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodEnum<{
            danger: "danger";
            info: "info";
            success: "success";
            warning: "warning";
        }> & z.core.$partial, z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>>>;
    }, z.core.$strip>>;
}, z.core.$strip>;
export declare const commonConfig: z.ZodObject<{
    clean: z.ZodOptional<z.ZodBoolean>;
}, z.core.$strip>;
/**
 * This defines the structure of the final configuration file
 */
export declare const configFileCreateSchema: z.ZodObject<{
    outDir: z.ZodNonOptional<z.ZodString>;
    themes: z.ZodNonOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        colors: z.ZodObject<{
            main: z.ZodRecord<z.ZodString, z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
            support: z.ZodDefault<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>>>;
            neutral: z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>;
        }, z.core.$strip>;
        typography: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
        }, z.core.$strip>>;
        borderRadius: z.ZodOptional<z.ZodNumber>;
        overrides: z.ZodOptional<z.ZodObject<{
            colors: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodEnum<{
                "background-default": "background-default";
                "background-tinted": "background-tinted";
                "surface-default": "surface-default";
                "surface-tinted": "surface-tinted";
                "surface-hover": "surface-hover";
                "surface-active": "surface-active";
                "border-subtle": "border-subtle";
                "border-default": "border-default";
                "border-strong": "border-strong";
                "text-subtle": "text-subtle";
                "text-default": "text-default";
                "base-default": "base-default";
                "base-hover": "base-hover";
                "base-active": "base-active";
                "base-contrast-subtle": "base-contrast-subtle";
                "base-contrast-default": "base-contrast-default";
            }> & z.core.$partial, z.ZodObject<{
                light: z.ZodOptional<z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
                dark: z.ZodOptional<z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>;
            }, z.core.$strip>>>>;
            severity: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodEnum<{
                danger: "danger";
                info: "info";
                success: "success";
                warning: "warning";
            }> & z.core.$partial, z.ZodPipe<z.ZodString, z.ZodTransform<`#${string}`, string>>>>>;
        }, z.core.$strip>>;
    }, z.core.$strip>>>;
    clean: z.ZodOptional<z.ZodBoolean>;
}, z.core.$strip>;
export type CommonConfigSchema = z.infer<typeof commonConfig>;
export type BuildConfigSchema = z.infer<typeof commonConfig>;
export type CreateConfigSchema = z.infer<typeof configFileCreateSchema>;
export type ConfigSchemaTheme = z.infer<typeof themeSchema>;
export type ColorOverrideSchema = z.infer<typeof overridesSchema>;
export {};
//# sourceMappingURL=config.d.ts.map