// src/migrations/color-rename-next49.ts
import * as R2 from "ramda";

// src/migrations/codemods/css/plugins.ts
import hash from "object-hash";
import pc from "picocolors";
import * as R from "ramda";
var printDelete = (text) => console.log(`${pc.red("Deleted:")} ${text}`.replace(/"|'/g, ""));
var deleteMsg = (decl, from) => `${pc.yellow(from)} @ ${pc.gray(`${JSON.stringify(decl.source?.input.file)}:${decl.source?.start?.line}:${decl.source?.start?.column}`)}`;
var cssVarRename = (dictionary) => ({
  postcssPlugin: `Replaces CSS variables ${hash(dictionary)}`,
  Declaration(decl) {
    const { value, prop } = decl;
    const deleted = /* @__PURE__ */ new Set();
    for (const [from, to] of Object.entries(dictionary)) {
      if (R.isNotEmpty(to)) {
        if (to === "[delete]") {
          deleted.add(deleteMsg(decl, from));
        }
        if (R.includes(from, value)) {
          decl.value = value.replace(from, to);
          continue;
        }
        if (R.includes(from, prop) && decl.variable) {
          decl.prop = prop.replace(from, to);
        }
      }
    }
    if (deleted.size > 0) {
      Array.from(deleted).forEach(printDelete);
    }
  }
});

// src/migrations/codemods/css/run.ts
import fs2 from "fs";
import glob from "fast-glob";
import postcss from "postcss";

// src/utils.ts
import fs from "fs/promises";
import pc2 from "picocolors";
var readFile = async (path, dry, allowFileNotFound) => {
  if (dry) {
    console.log(`${pc2.blue("readFile")} ${path}`);
    return Promise.resolve("");
  }
  try {
    return await fs.readFile(path, "utf-8");
  } catch (error) {
    if (allowFileNotFound && error.code === "ENOENT") {
      return "";
    }
    throw error;
  }
};

// src/migrations/codemods/css/run.ts
var runCssCodemod = async ({ plugins = [], globPattern = "./**/*.css" }) => {
  const processor = postcss(plugins);
  const transform = async () => {
    console.log(`Running migration in ${globPattern}`);
    const files = await glob([globPattern], {
      ignore: ["**/node_modules/**", "**/dist/**"],
      // TODO: Not working as expected
      absolute: true
    });
    const filePromises = files.map(async (file) => {
      if (file.includes("node_modules") || file.includes("dist")) {
        return;
      }
      const contents = readFile(file).toString();
      const result = await processor.process(contents, { from: file });
      fs2.writeFileSync(file, result.css);
    });
    await Promise.all(filePromises);
  };
  return transform();
};

// src/migrations/color-rename-next49.ts
var replace = (oldTemplate, newTemplate, colors2, placeholder = "[color]") => R2.reduce(
  (acc, color) => {
    acc[oldTemplate.replace(placeholder, color)] = newTemplate.replace(placeholder, color);
    return acc;
  },
  {},
  colors2
);
var colors = ["neutral", "accent", "brand1", "brand2", "brand3", "danger", "warning", "success", "info"];
var color_rename_next49_default = (glob2) => {
  const renames = {
    // Background
    "--ds-color-background-subtle": "--ds-color-background-tinted",
    ...replace("--ds-color-[color]-background-subtle", "--ds-color-[color]-background-tinted", colors),
    // Surface
    "--ds-color-surface-default": "--ds-color-surface-tinted",
    ...replace("--ds-color-[color]-surface-default", "--ds-color-[color]-surface-tinted", colors),
    // Contrast
    "--ds-color-contrast-default": "--ds-color-base-contrast-default",
    "--ds-color-contrast-subtle": "--ds-color-base-contrast-subtle",
    ...replace("--ds-color-[color]-contrast-default", "--ds-color-[color]-base-contrast-default", colors),
    ...replace("--ds-color-[color]-contrast-subtle", "--ds-color-[color]-base-contrast-subtle", colors)
  };
  console.log(`Renaming ${Object.keys(renames).length} variables`, renames);
  return runCssCodemod({
    globPattern: glob2,
    plugins: [
      // https://github.com/digdir/designsystemet/issues/3046
      cssVarRename(renames)
    ]
  });
};
export {
  color_rename_next49_default as default
};
