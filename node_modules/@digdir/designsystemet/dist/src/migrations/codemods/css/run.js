// src/migrations/codemods/css/run.ts
import fs2 from "fs";
import glob from "fast-glob";
import postcss from "postcss";

// src/utils.ts
import fs from "fs/promises";
import pc from "picocolors";
var readFile = async (path, dry, allowFileNotFound) => {
  if (dry) {
    console.log(`${pc.blue("readFile")} ${path}`);
    return Promise.resolve("");
  }
  try {
    return await fs.readFile(path, "utf-8");
  } catch (error) {
    if (allowFileNotFound && error.code === "ENOENT") {
      return "";
    }
    throw error;
  }
};

// src/migrations/codemods/css/run.ts
var runCssCodemod = async ({ plugins = [], globPattern = "./**/*.css" }) => {
  const processor = postcss(plugins);
  const transform = async () => {
    console.log(`Running migration in ${globPattern}`);
    const files = await glob([globPattern], {
      ignore: ["**/node_modules/**", "**/dist/**"],
      // TODO: Not working as expected
      absolute: true
    });
    const filePromises = files.map(async (file) => {
      if (file.includes("node_modules") || file.includes("dist")) {
        return;
      }
      const contents = readFile(file).toString();
      const result = await processor.process(contents, { from: file });
      fs2.writeFileSync(file, result.css);
    });
    await Promise.all(filePromises);
  };
  return transform();
};
export {
  runCssCodemod
};
