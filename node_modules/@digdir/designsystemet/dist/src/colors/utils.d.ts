import type { CssColor, HexColor } from './types.js';
/**
 * Converts a HEX color '#xxxxxx' into a CSS HSL string 'hsl(x,x,x)'
 *
 * @param hex A hex color string
 * @param valuesOnly If true, only the values are returned
 * @returns A CSS HSL string
 */
export declare const hexToCssHsl: (hex: HexColor, valuesOnly?: boolean) => string;
/**
 * Converts a HEX string '#xxxxxx' into an array of HSL values '[h,s,l]'
 *
 * @param H A Hex color string
 * @returns HSL values in an array
 */
export declare const hexToHSL: (hex: HexColor) => number[];
/**
 * Converts a HEX color '#xxxxxx' into an array of HSLuv values '[h,s,l]'
 *
 * @param hex A hex color string
 * @returns
 */
export declare const hexToHsluv: (hex: HexColor) => number[];
/**
 * Converts a HSL number array '[h,s,l]' into HSL CSS string 'hsl(x,x,x)'
 *
 * @param HSL A HSL number array '[h,s,l]'
 * @returns A hex color string
 */
export declare const hslArrToCss: (HSL: number[]) => string;
/**
 * Converts a HSL CSS string 'hsl(x,x,x)' into an array of HSL values '[h,s,l]'
 *
 * @param h The HSL hue
 * @param s The HSL saturation
 * @param l The HSL lightness
 * @returns HEX color string
 */
export declare const HSLToHex: (h: number, s: number, l: number) => HexColor;
/**
 * Converts a HEX color '#xxxxxx' into an array of RGB values '[R, G, B]'
 *
 * @param hex A hex color string
 * @param type The type of RGB values to return
 * @returns RGB values in an array
 */
export declare const hexToRgb: (hex: string, type?: "255" | "1") => {
    r: number;
    g: number;
    b: number;
};
/**
 * Get the contrast ratio between two HEX colors
 *
 * @param color1 The first color to compare
 * @param color2 The second color to compare
 * @returns
 */
export declare const getContrastFromHex: (color1: HexColor, color2: HexColor) => number;
/**
 * Get the contrast ratio between two colors at a specific lightness
 *
 * @param lightness The lightness value
 * @param mainColor The main color
 * @param backgroundColor The background color
 * @returns The contrast ratio
 */
export declare const getContrastFromLightness: (lightness: number, mainColor: CssColor, backgroundColor: CssColor) => number;
/**
 * Check if two colors have enough contrast to be used together
 *
 * @param color1 The first color
 * @param color2 The second color
 * @returns If the colors have enough contrast
 */
export declare const areColorsContrasting: (color1: CssColor, color2: CssColor, type?: "decorative" | "aa" | "aaa") => boolean;
/**
 * Check if aa string value is a HEX color
 *
 * @param hex The hex color
 */
export declare const isHexColor: (hex: string) => boolean;
/**
 * Get the luminance value from a lightness value
 *
 * @param lightness The lightness value
 */
export declare const getLuminanceFromLightness: (lightness: number) => number;
/**
 * Get the relative luminance from any valid css color
 *
 * @param color
 */
export declare const getLuminanceFromColor: (color: string) => number;
/**
 * Get the HSLuv lightness from a HEX color
 *
 * @param hex The hex color
 */
export declare const getLightnessFromHex: (hex: HexColor) => number;
/**
 *
 * This function checks if white or black text can be used on 2 different colors at 4.5:1 contrast.
 *
 * @param baseDefaultColor Base default color
 * @param baseActiveColor Base active color
 */
export declare const canTextBeUsedOnColors: (baseDefaultColor: CssColor, baseActiveColor: CssColor) => boolean;
/**
 * Converts a color to a HEX color
 *
 * @param color
 * @returns
 */
export declare const convertToHex: (color?: string) => HexColor;
export declare const rgbToHex: (rgb: {
    r: number;
    g: number;
    b: number;
}) => HexColor;
/**
 * Convert a color to a different format
 *
 * @param cssColor Any valid css color
 * @param format Color space/format supported here https://colorjs.io/docs/spaces
 */
export declare const convertColor: (cssColor: string, format: string) => string;
//# sourceMappingURL=utils.d.ts.map