// src/utils.ts
import fs from "fs/promises";
import pc from "picocolors";
var mkdir = async (dir, dry) => {
  if (dry) {
    console.log(`${pc.blue("mkdir")} ${dir}`);
    return Promise.resolve();
  }
  const exists = await fs.access(dir, fs.constants.F_OK).then(() => true).catch(() => false);
  if (exists) {
    return Promise.resolve();
  }
  return fs.mkdir(dir, { recursive: true });
};
var writeFile = async (path, data, dry) => {
  if (dry) {
    console.log(`${pc.blue("writeFile")} ${path}`);
    return Promise.resolve();
  }
  return fs.writeFile(path, data, { encoding: "utf-8" }).catch((error) => {
    console.error(pc.red(`Error writing file: ${path}`));
    console.error(pc.red(error));
    throw error;
  });
};
var cp = async (src, dest, dry, filter) => {
  if (dry) {
    console.log(`${pc.blue("cp")} ${src} ${dest}`);
    return Promise.resolve();
  }
  return fs.cp(src, dest, { recursive: true, filter });
};
var copyFile = async (src, dest, dry) => {
  if (dry) {
    console.log(`${pc.blue("copyFile")} ${src} to ${dest}`);
    return Promise.resolve();
  }
  return fs.copyFile(src, dest);
};
var cleanDir = async (dir, dry) => {
  if (dry) {
    console.log(`${pc.blue("cleanDir")} ${dir}`);
    return Promise.resolve();
  }
  console.log(`
\u{1F525} Cleaning dir ${pc.red(`${dir.trim()}`)} `);
  return fs.rm(dir, { recursive: true, force: true });
};
var readFile = async (path, dry, allowFileNotFound) => {
  if (dry) {
    console.log(`${pc.blue("readFile")} ${path}`);
    return Promise.resolve("");
  }
  try {
    return await fs.readFile(path, "utf-8");
  } catch (error) {
    if (allowFileNotFound && error.code === "ENOENT") {
      return "";
    }
    throw error;
  }
};
export {
  cleanDir,
  copyFile,
  cp,
  mkdir,
  readFile,
  writeFile
};
